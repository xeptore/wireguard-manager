//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var PeerConfigs = newPeerConfigsTable("wgmngr", "peer_configs", "")

type peerConfigsTable struct {
	mysql.Table

	//Columns
	ID            mysql.ColumnString
	Name          mysql.ColumnString
	Description   mysql.ColumnString
	GeneratedByID mysql.ColumnString
	GeneratedAt   mysql.ColumnTimestamp
	Ipv4          mysql.ColumnString
	Ipv6          mysql.ColumnString
	PrivateKey    mysql.ColumnString
	PublicKey     mysql.ColumnString
	PresharedKey  mysql.ColumnString
	IsActive      mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type PeerConfigsTable struct {
	peerConfigsTable

	NEW peerConfigsTable
}

// AS creates new PeerConfigsTable with assigned alias
func (a PeerConfigsTable) AS(alias string) *PeerConfigsTable {
	return newPeerConfigsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PeerConfigsTable with assigned schema name
func (a PeerConfigsTable) FromSchema(schemaName string) *PeerConfigsTable {
	return newPeerConfigsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PeerConfigsTable with assigned table prefix
func (a PeerConfigsTable) WithPrefix(prefix string) *PeerConfigsTable {
	return newPeerConfigsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PeerConfigsTable with assigned table suffix
func (a PeerConfigsTable) WithSuffix(suffix string) *PeerConfigsTable {
	return newPeerConfigsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPeerConfigsTable(schemaName, tableName, alias string) *PeerConfigsTable {
	return &PeerConfigsTable{
		peerConfigsTable: newPeerConfigsTableImpl(schemaName, tableName, alias),
		NEW:              newPeerConfigsTableImpl("", "new", ""),
	}
}

func newPeerConfigsTableImpl(schemaName, tableName, alias string) peerConfigsTable {
	var (
		IDColumn            = mysql.StringColumn("id")
		NameColumn          = mysql.StringColumn("name")
		DescriptionColumn   = mysql.StringColumn("description")
		GeneratedByIDColumn = mysql.StringColumn("generated_by_id")
		GeneratedAtColumn   = mysql.TimestampColumn("generated_at")
		Ipv4Column          = mysql.StringColumn("ipv4")
		Ipv6Column          = mysql.StringColumn("ipv6")
		PrivateKeyColumn    = mysql.StringColumn("private_key")
		PublicKeyColumn     = mysql.StringColumn("public_key")
		PresharedKeyColumn  = mysql.StringColumn("preshared_key")
		IsActiveColumn      = mysql.BoolColumn("is_active")
		allColumns          = mysql.ColumnList{IDColumn, NameColumn, DescriptionColumn, GeneratedByIDColumn, GeneratedAtColumn, Ipv4Column, Ipv6Column, PrivateKeyColumn, PublicKeyColumn, PresharedKeyColumn, IsActiveColumn}
		mutableColumns      = mysql.ColumnList{NameColumn, DescriptionColumn, GeneratedByIDColumn, GeneratedAtColumn, Ipv4Column, Ipv6Column, PrivateKeyColumn, PublicKeyColumn, PresharedKeyColumn, IsActiveColumn}
	)

	return peerConfigsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		Name:          NameColumn,
		Description:   DescriptionColumn,
		GeneratedByID: GeneratedByIDColumn,
		GeneratedAt:   GeneratedAtColumn,
		Ipv4:          Ipv4Column,
		Ipv6:          Ipv6Column,
		PrivateKey:    PrivateKeyColumn,
		PublicKey:     PublicKeyColumn,
		PresharedKey:  PresharedKeyColumn,
		IsActive:      IsActiveColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
